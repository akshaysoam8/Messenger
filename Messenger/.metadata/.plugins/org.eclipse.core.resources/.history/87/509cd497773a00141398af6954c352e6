package com.akshay.messenger;

import java.io.IOException;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.gcm.GoogleCloudMessaging;

public class MainActivity extends Activity
{
	public static final String PROPERTY_REG_ID = "registration_id";
	private static final String PROPERTY_APP_VERSION = "appVersion";
	private final static int PLAY_SERVICES_RESOLUTION_REQUEST = 9000;

	GoogleCloudMessaging gcm;
	SharedPreferences prefs;
	Context context;

	EditText message_text;
	EditText send_to;
	EditText name;

	String regid;

	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);

		Log.i(Common.TAG, "MainActivity started");

		Button btn_register = (Button) findViewById(R.id.register);
		btn_register.setOnClickListener(new OnClickListener()
		{
			@Override
			public void onClick(View v)
			{
				Log.i(Common.TAG, "MainActivity Register Button Clicked");

				sendRegistrationIdToBackend(Constants.REG_ID);
			}
		});

		context = getApplicationContext();
		
		ChatActivity.initialize(context);

		if (checkPlayServices())
		{
			Log.i(Common.TAG, "MainActivity google play services check succeeded");

			gcm = GoogleCloudMessaging.getInstance(this);

			if (getRegistrationId(context).isEmpty())
			{				
				setContentView(R.layout.register);

				registerInBackground();
			}
			else
			{
				Intent intent = new Intent(MainActivity.this, ChatListActivity.class);
				startActivity(intent);
			}
		}
	}

	@Override
	protected void onResume()
	{
		super.onResume();

		Log.i(Common.TAG, "MainActivity Resumed");

		checkPlayServices();

		final SharedPreferences prefs = getGCMPreferences(getApplicationContext());
		Constants.REG_ID = prefs.getString(PROPERTY_REG_ID, "");
	}

	private boolean checkPlayServices()
	{
		Log.i(Common.TAG, "MainActivity Checking for google play services");

		int resultCode = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);

		if (resultCode != ConnectionResult.SUCCESS)
		{
			Log.i(Common.TAG, "MainActivity result status not SUCCESS");

			if (GooglePlayServicesUtil.isUserRecoverableError(resultCode))
			{
				GooglePlayServicesUtil.getErrorDialog(resultCode, this, PLAY_SERVICES_RESOLUTION_REQUEST).show();
			}
			else
			{
				Log.i(Common.TAG, "MainActivity This device is not supported.");
				finish();
			}
			return false;
		}
		return true;
	}

	private String getRegistrationId(Context context)
	{
		Log.i(Common.TAG, "MainActivity getting the registration ID");

		final SharedPreferences prefs = getGCMPreferences(context);
		String registrationId = prefs.getString(PROPERTY_REG_ID, "");

		if (registrationId.isEmpty())
		{
			Log.i(Common.TAG, "MainActivity Registration not found.");
			return "";
		}

		int registeredVersion = prefs.getInt(PROPERTY_APP_VERSION, Integer.MIN_VALUE);
		int currentVersion = getAppVersion(context);

		if (registeredVersion != currentVersion)
		{
			Log.i(Common.TAG, "MainActivity App version changed.");
			return "";
		}

		Log.i(Common.TAG, "MainActivity App version is same");
		Log.i(Common.TAG, "MainActivity Registration Id found : " + registrationId);

		Constants.REG_ID = registrationId;

		return registrationId;
	}

	private SharedPreferences getGCMPreferences(Context context)
	{
		Log.i(Common.TAG, "MainActivity Geting the shared preferences");

		return getSharedPreferences(MainActivity.class.getSimpleName(), Context.MODE_PRIVATE);
	}

	private static int getAppVersion(Context context)
	{
		Log.i(Common.TAG, "MainActivity geting the app version");

		try
		{
			PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);
			return packageInfo.versionCode;
		}
		catch (NameNotFoundException e)
		{
			throw new RuntimeException("Could not get package name: " + e);
		}
	}

	private void registerInBackground()
	{
		Log.i(Common.TAG, "MainActivity registering in the background.");

		new AsyncTask<Void, Void, Void>()
		{
			@Override
			protected Void doInBackground(Void... params)
			{
				Log.i(Common.TAG, "MainActivity doing in the background.");

				try
				{
					if (gcm == null)
					{
						gcm = GoogleCloudMessaging.getInstance(context);
					}

					regid = gcm.register(Constants.SENDER_ID);
					Log.i(Common.TAG, "MainActivity Device registered, registration ID=" + regid);

					Constants.REG_ID = regid;

					storeRegistrationId(context, regid);
				}
				catch (IOException ex)
				{
					Log.i(Common.TAG, "MainActivity IOException :" + ex.getMessage());
				}
				return null;
			}

			@Override
			protected void onPostExecute(Void params)
			{
				Log.i(Common.TAG, "MainActivity on Post Execute");
			}
		}.execute(null, null, null);

	}

	private void sendRegistrationIdToBackend(String regid)
	{
		Log.i(Common.TAG, "MainActivity Sending the registration id to the database");

		name = (EditText) findViewById(R.id.your_name);
		EditText email = (EditText) findViewById(R.id.sender_email);
		
		Common.SENDER_NAME = name.getText().toString();

		Log.i(Common.TAG, "MainActivity Adding new profile in the database");

		MongoDatabase.AddNewProfile(name.getText().toString(), email.getText().toString(), regid);

		Log.i(Common.TAG, "MainActivity New profile added.");
	}

	private void storeRegistrationId(Context context, String regId)
	{
		Log.i(Common.TAG, "MainActivity storing the registration id");

		final SharedPreferences prefs = getGCMPreferences(context);
		int appVersion = getAppVersion(context);

		Log.i(Common.TAG, "Saving regId on app version " + appVersion);

		SharedPreferences.Editor editor = prefs.edit();
		editor.putString(PROPERTY_REG_ID, regId);
		editor.putInt(PROPERTY_APP_VERSION, appVersion);
		editor.putString("SENDER_NAME", name.getText().toString());
		editor.commit();
	}
}