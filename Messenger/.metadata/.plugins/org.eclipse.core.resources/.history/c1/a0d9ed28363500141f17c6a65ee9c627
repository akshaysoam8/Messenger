package com.akshay.messenger;

import java.io.Serializable;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;

import android.util.Log;

/**
 * GCM message.
 * 
 * <p>
 * Instances of this class are immutable and should be created using a
 * {@link Builder}. Examples:
 * 
 * <strong>Simplest message:</strong>
 * 
 * <pre>
 * <code>
 * Message message = new Message.Builder().build();
 * </pre>
 * 
 * </code>
 * 
 * <strong>Message with optional attributes:</strong>
 * 
 * <pre>
 * <code>
 * Message message = new Message.Builder()
 *    .collapseKey(collapseKey)
 *    .timeToLive(3)
 *    .delayWhileIdle(true)
 *    .dryRun(true)
 *    .restrictedPackageName(restrictedPackageName)
 *    .build();
 * </pre>
 * 
 * </code>
 * 
 * <strong>Message with optional attributes and payload data:</strong>
 * 
 * <pre>
 * <code>
 * Message message = new Message.Builder()
 *    .collapseKey(collapseKey)
 *    .timeToLive(3)
 *    .delayWhileIdle(true)
 *    .dryRun(true)
 *    .restrictedPackageName(restrictedPackageName)
 *    .addData("key1", "value1")
 *    .addData("key2", "value2")
 *    .build();
 * </pre>
 * 
 * </code>
 */
public final class Message implements Serializable
{
	private final String collapseKey;
	private final Boolean delayWhileIdle;
	private final Integer timeToLive;
	private final Map<String, String> data;
	private final Boolean dryRun;
	private final String restrictedPackageName;
	public static String sender_name = "Akshay";
	private static String message_body = "Hello World";
	private final String TAG = "Akshay Messenger";

	public static final class Builder
	{
		private final Map<String, String> data;

		// optional parameters
		private String collapseKey;
		private Boolean delayWhileIdle;
		private Integer timeToLive;
		private Boolean dryRun;
		private String restrictedPackageName;
		private String sender_name;
		private String message_body;

		public Builder()
		{
			this.data = new LinkedHashMap<String, String>();
		}

		/**
		 * Sets the collapseKey property.
		 */
		public Builder collapseKey(String value)
		{
			collapseKey = value;
			return this;
		}

		/**
		 * Sets the delayWhileIdle property (default value is {@literal false}).
		 */
		public Builder delayWhileIdle(boolean value)
		{
			delayWhileIdle = value;
			return this;
		}

		/**
		 * Sets the time to live, in seconds.
		 */
		public Builder timeToLive(int value)
		{
			timeToLive = value;
			return this;
		}

		/**
		 * Adds a key/value pair to the payload data.
		 */
		public Builder addData(String key, String value)
		{
			data.put(key, value);
			return this;
		}

		/**
		 * Sets the dryRun property (default value is {@literal false}).
		 */
		public Builder dryRun(boolean value)
		{
			dryRun = value;
			return this;
		}

		/**
		 * Sets the restrictedPackageName property.
		 */
		public Builder restrictedPackageName(String value)
		{
			restrictedPackageName = value;
			return this;
		}

		public Builder sender_name(String value)
		{
			sender_name = value;
			return this;
		}

		public Builder message_body(String value)
		{
			message_body = value;
			return this;
		}

		public Message build()
		{
			return new Message(this);
		}
	}

	private Message(Builder builder)
	{
		collapseKey = builder.collapseKey;
		delayWhileIdle = builder.delayWhileIdle;
		data = Collections.unmodifiableMap(builder.data);
		timeToLive = builder.timeToLive;
		dryRun = builder.dryRun;
		restrictedPackageName = builder.restrictedPackageName;
		sender_name = builder.sender_name;
		message_body = builder.message_body;
	}

	/**
	 * Gets the collapse key.
	 */
	public String getCollapseKey()
	{
		return collapseKey;
	}

	/**
	 * Gets the delayWhileIdle flag.
	 */
	public Boolean isDelayWhileIdle()
	{
		return delayWhileIdle;
	}

	/**
	 * Gets the time to live (in seconds).
	 */
	public Integer getTimeToLive()
	{
		return timeToLive;
	}

	/**
	 * Gets the dryRun flag.
	 */
	public Boolean isDryRun()
	{
		return dryRun;
	}

	/**
	 * Gets the restricted package name.
	 */
	public String getRestrictedPackageName()
	{
		return restrictedPackageName;
	}

	public String getSenderName()
	{
		return sender_name;
	}

	public String getMessageBody()
	{
		return message_body;
	}

	/**
	 * Gets the payload data, which is immutable.
	 */
	public Map<String, String> getData()
	{
		return data;
	}

	@Override
	public String toString()
	{
		Log.i(TAG, "Message Converting message object to string.");

		StringBuilder builder = new StringBuilder("Message(");

		if (collapseKey != null)
		{
			Log.i(TAG, "Message CollapseKey not null");

			builder.append("collapseKey=").append(collapseKey).append(", ");
		}
		if (timeToLive != null)
		{
			Log.i(TAG, "Message timeToLive not null");

			builder.append("timeToLive=").append(timeToLive).append(", ");
		}
		if (delayWhileIdle != null)
		{
			Log.i(TAG, "Message delayWhileIdle not null");

			builder.append("delayWhileIdle=").append(delayWhileIdle).append(", ");
		}
		if (dryRun != null)
		{
			Log.i(TAG, "Message dryRun not null");

			builder.append("dryRun=").append(dryRun).append(", ");
		}
		if (restrictedPackageName != null)
		{
			Log.i(TAG, "Message restrictedPackedName not null");

			builder.append("restrictedPackageName=").append(restrictedPackageName).append(", ");
		}
		if (sender_name != null)
		{
			Log.i(TAG, "Message sender_name not null");

			builder.append("sender_name=").append(sender_name).append(", ");
		}
		if (message_body != null)
		{
			Log.i(TAG, "Message message_body not null");

			builder.append("message_body=").append(message_body).append(", ");
		}
		if (!data.isEmpty())
		{
			Log.i(TAG, "Message extra data not null");

			builder.append("data: {");

			for (Map.Entry<String, String> entry : data.entrySet())
			{
				builder.append(entry.getKey()).append("=").append(entry.getValue()).append(",");
			}

			builder.delete(builder.length() - 1, builder.length());
			builder.append("}");
		}

		if (builder.charAt(builder.length() - 1) == ' ')
		{
			builder.delete(builder.length() - 2, builder.length());
		}

		builder.append(")");

		Log.i(TAG, "Message final builder.toString() : " + builder.toString());

		return builder.toString();
	}
}