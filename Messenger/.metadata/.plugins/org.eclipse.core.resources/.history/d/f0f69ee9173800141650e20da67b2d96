package com.akshay.messenger;

import android.app.Activity;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import android.text.TextUtils;
import android.util.Log;

import com.google.android.gms.gcm.GoogleCloudMessaging;

public class GcmBroadcastReceiver extends BroadcastReceiver
{
	private Context ctx;

	@Override
	public void onReceive(Context context, Intent intent)
	{
		ctx = context;

		Bundle bundle =intent.getExtras();
		
		String extraString = bundle.getString("registration_id");

		if (extraString != null)
			Log.i(Common.TAG, "extraString : " + extraString);

		else
			Log.i(Common.TAG, "extraString is null.");

		Log.i(Common.TAG, "GcmBroadcastReceiver Intent Recieved.");

		Log.i(Common.TAG, "GcmBroadcastReceiver setting the wake up lock");
		PowerManager mPowerManager = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
		WakeLock mWakeLock = mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, Common.TAG);
		mWakeLock.acquire();

		Log.i(Common.TAG, "GcmBroadcastReceiver WakeLock Acquired");

		try
		{
			GoogleCloudMessaging gcm = GoogleCloudMessaging.getInstance(context);

			String messageType = gcm.getMessageType(intent);

			Log.i(Common.TAG, "GcmBroadcastReceiver messageType : " + messageType);

			if (GoogleCloudMessaging.MESSAGE_TYPE_SEND_ERROR.equals(messageType))
			{
				Log.i(Common.TAG, "GcmBroadcastReceiver Message Received status : error.");
				sendNotification("Send error", false);
			}

			else if (GoogleCloudMessaging.MESSAGE_TYPE_DELETED.equals(messageType))
			{
				Log.i(Common.TAG, "GcmBroadcastReceiver Message received status : deleted.");
				sendNotification("Deleted messages on server", false);
			}

			else
			{
				Log.i(Common.TAG, "GcmBroadcastReceiver Message Recieved status : correct.");

				if (Common.isNotify())
				{
					Log.i(Common.TAG, "GcmBroadcastReceiver Notifying for the new message.");
					sendNotification("New message", true);
				}
			}

			setResultCode(Activity.RESULT_OK);

		}
		finally
		{
			Log.i(Common.TAG, "GcmBroadcastReceiver Releasing the wake lock.");
			mWakeLock.release();
		}
	}

	private void sendNotification(String text, boolean launchApp)
	{
		Log.i(Common.TAG, "GcmBroadcastReceiver Sending the notification");

		NotificationManager mNotificationManager = (NotificationManager) ctx.getSystemService(Context.NOTIFICATION_SERVICE);

		Notification.Builder mBuilder = new Notification.Builder(ctx).setAutoCancel(true).setSmallIcon(R.drawable.ic_launcher).setContentTitle(ctx.getString(R.string.app_name)).setContentText(text);

		if (!TextUtils.isEmpty(Common.getRingtone()))
		{
			Log.i(Common.TAG, "GcmBroadcastReceiver Getting the ringtone.");
			mBuilder.setSound(Uri.parse(Common.getRingtone()));
		}

		if (launchApp)
		{
			Log.i(Common.TAG, "GcmBroadcastReceiver Launching the main Activity.");

			Intent intent = new Intent(ctx, MainActivity.class);
			intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP);

			PendingIntent pi = PendingIntent.getActivity(ctx, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
			mBuilder.setContentIntent(pi);
		}

		mNotificationManager.notify(1, mBuilder.getNotification());
	}
}